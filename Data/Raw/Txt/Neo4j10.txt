Neo4j - Graph Database System

Neo4j is a Graph Database System that supports both transactional and analytical processing of graph-based data. It is part of a relatively new class of NoSQL databases and is considered schema optional (a schema can be imposed if needed). Neo4j supports various types of indexing, is ACID compliant, and supports distributed computing. Similar systems include Microsoft CosmoDB and Amazon Neptune.

Neo4j - Query Language and Plugins

Cypher:
- Neo4j’s graph query language, created in 2011.
- Goal: SQL-equivalent language for graph databases.
- Provides a visual way of matching patterns and relationships.
  Example: `(nodes)-[:CONNECT_TO]->(otherNodes)`.

APOC Plugin:
- Awesome Procedures on Cypher.
- Add-on library that provides hundreds of procedures and functions.

Graph Data Science Plugin:
- Provides efficient implementations of common graph algorithms (e.g., Dijkstra’s, PageRank, etc.).

Neo4j in Docker Compose

Docker Compose:
- Supports multi-container management.
- Set-up is declarative using a YAML `docker-compose.yaml` file.
  - Defines services, volumes, networks, etc.
- One command can start, stop, or scale multiple services.
- Provides a consistent method for producing identical environments (no more “it works on my machine!”).
- Interaction is mostly via the command line.

Example `docker-compose.yaml`:
```yaml
services:
  neo4j:
    container_name: neo4j
    image: neo4j:latest
    ports:
      - 7474:7474
      - 7687:7687
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
    volumes:
      - ./neo4j_db/data:/data
      - ./neo4j_db/logs:/logs
      - ./neo4j_db/import:/var/lib/neo4j/import
      - ./neo4j_db/plugins:/plugins

Inserting Data by Creating Nodes
CREATE (:User {name: "Alice", birthPlace: "Paris"})
CREATE (:User {name: "Bob", birthPlace: "London"})
CREATE (:User {name: "Carol", birthPlace: "London"})
CREATE (:User {name: "Dave", birthPlace: "London"})
CREATE (:User {name: "Eve", birthPlace: "Rome"})

Adding an Edge with No Variable Names
CREATE (:User {name: "Alice", birthPlace: "Paris"})
CREATE (:User {name: "Bob", birthPlace: "London"})

MATCH (alice:User {name:”Alice”})
MATCH (bob:User {name: “Bob”})
CREATE (alice)-[:KNOWS {since: “2022-12-01”}]->(bob)
Note: Relationships are directed in neo4j. 

Matching
Which users were born in London?
MATCH (usr:User {birthPlace: “London”})
RETURN usr.name, usr.birthPlace
13

Basic Data Importing
LOAD CSV WITH HEADERS 
FROM 'file:///netflix_titles.csv' AS line 
CREATE(:Movie {
    id: line.show_id, 
    title: line.title, 
    releaseYear: line.release_year
  }
)


Type the following into the Cypher Editor in Neo4j Browser
Loading CSVs - General Syntax
LOAD CSV
[WITH HEADERS]
FROM 'file:///file_in_import_folder.csv'
AS line
[FIELDTERMINATOR ',']
// do stuffs with 'line'

Importing with Directors this Time
LOAD CSV WITH HEADERS
FROM 'file:///netflix_titles.csv' AS line
WITH split(line.director, ",") as directors_list
UNWIND directors_list AS director_name
CREATE (:Person {name: trim(director_name)})
But this generates duplicate Person nodes (a director can direct more than 1 movie)

Importing with Directors Merged
MATCH (p:Person) DELETE p

LOAD CSV WITH HEADERS
FROM 'file:///netflix_titles.csv' AS line
WITH split(line.director, ",") as directors_list
UNWIND directors_list AS director_name
MERGE (:Person {name: director_name})

Adding Edges
LOAD CSV WITH HEADERS
FROM 'file:///netflix_titles.csv' AS line
MATCH (m:Movie {id: line.show_id})
WITH m, split(line.director, ",") as directors_list
UNWIND directors_list AS director_name
MATCH (p:Person {name: director_name})
CREATE (p)-[:DIRECTED]->(m)

Gut Check
Let’s check the movie titled Ray:
MATCH (m:Movie {title: "Ray"})<-[:DIRECTED]-(p:Person)
RETURN m, p