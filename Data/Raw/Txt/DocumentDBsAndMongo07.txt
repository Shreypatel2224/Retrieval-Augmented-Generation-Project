Document Database

A Document Database is a non-relational database that stores data as structured documents, usually in JSON. They are designed to be simple, flexible, and scalable.

What is JSON?
- JSON (JavaScript Object Notation) is a lightweight data-interchange format.
- It is easy for humans to read and write.
- It is easy for machines to parse and generate.
- JSON is built on two structures:
  - A collection of name/value pairs (object, record, struct, dictionary, hash table, keyed list, or associative array).
  - An ordered list of values (array, vector, list, or sequence).
- These are universal data structures supported by virtually all modern programming languages, making JSON a great data interchange format.

JSON Syntax
- Refer to JSON syntax documentation: https://www.json.org/json-en.html

Binary JSON? BSON
- BSON (Binary JSON) is a binary-encoded serialization of a JSON-like document structure.
- Supports extended types not part of basic JSON (e.g., Date, BinaryData, etc.).
- Lightweight: Keeps space overhead to a minimum.
- Traversable: Designed to be easily traversed, which is vitally important to a document DB.
- Efficient: Encoding and decoding must be efficient.
- Supported by many modern programming languages.

XML (eXtensible Markup Language)
- Precursor to JSON as a data exchange format.
- XML + CSS → web pages that separated content and formatting.
- Structurally similar to HTML, but the tag set is extensible.

XML-Related Tools/Technologies
- XPath: A syntax for retrieving specific elements from an XML document.
- XQuery: A query language for interrogating XML documents; the SQL of XML.
- DTD (Document Type Definition): A language for describing the allowed structure of an XML document.
- XSLT (eXtensible Stylesheet Language Transformation): A tool to transform XML into other formats, including non-XML formats such as HTML.

Why Document Databases?
- Document databases address the impedance mismatch problem between object persistence in OO systems and how relational DBs structure data.
- OO Programming → Inheritance and Composition of types. Saving a complex object to a relational database requires deconstructing it.
- The structure of a document is self-describing.
- They are well-aligned with apps that use JSON/XML as a transport layer.

MongoDB
- Started in 2007 after DoubleClick was acquired by Google, and 3 of its veterans realized the limitations of relational databases for serving > 400,000 ads per second.
- MongoDB was short for Humongous Database.
- MongoDB Atlas released in 2016 → document DB as a service.

MongoDB Structure
- Database
  - Collection A
    - Document 1
    - Document 2
    - Document 3
  - Collection B
    - Document 1
    - Document 2
    - Document 3
  - Collection C
    - Document 1
    - Document 2
    - Document 3

MongoDB Documents
- No predefined schema for documents is needed.
- Every document in a collection could have different data/schema.

Relational vs MongoDB/Document DB
- RDBMS: Database → Table/View → Row → Column → Index → Join → Foreign Key
- MongoDB: Database → Collection → Document → Field → Index → Embedded Document → Reference

MongoDB Features
- Rich Query Support: Robust support for all CRUD operations.
- Indexing: Supports primary and secondary indices on document fields.
- Replication: Supports replica sets with automatic failover.
- Load balancing built in.

MongoDB Versions
- MongoDB Atlas: Fully managed MongoDB service in the cloud (DBaaS).
- MongoDB Enterprise: Subscription-based, self-managed version of MongoDB.
- MongoDB Community: Source-available, free-to-use, self-managed.

Interacting with MongoDB
- mongosh: MongoDB Shell (CLI tool for interacting with a MongoDB instance).
- MongoDB Compass: Free, open-source GUI to work with a MongoDB database.
- DataGrip and other 3rd Party Tools: Every major language has a library to interface with MongoDB (e.g., PyMongo for Python, Mongoose for JavaScript/node).

MongoDB Community Edition in Docker
- Create a container.
- Map host:container port 27017.
- Give initial username and password for superuser.

MongoDB Compass
- GUI Tool for interacting with MongoDB instance.
- Download and install from MongoDB Compass.

Load MFlix Sample Data Set
- In Compass, create a new Database named mflix.
- Download mflix sample dataset and unzip it.
- Import JSON files for users, theaters, movies, and comments into new collections in the mflix database.

Creating a Database and Collection
- To Create a new DB: mflix
- To Create a new Collection: users

mongosh - Mongo Shell
- find(...) is like SELECT.
  collection.find({ ____ }, { ____ })
  filters             projections

PyMongo

PyMongo is a Python library for interfacing with MongoDB instances.

Connecting to MongoDB
```python
from pymongo import MongoClient
client = MongoClient('mongodb://user_name:pw@localhost:27017')

Getting a database and collection:
from pymongo import MongoClient
client = MongoClient('mongodb://user_name:pw@localhost:27017')
db = client['ds4300']
collection = db['myCollection']

Inserting a single document:
db = client['ds4300']
collection = db['myCollection']

post = {
    "author": "Mark",
    "text": "MongoDB is Cool!",
    "tags": ["mongodb", "python"]
}

post_id = collection.insert_one(post).inserted_id
print(post_id)

Count Documents in Collection: demodb.collection.count_documents({})

Finding documents: collection.find()

Finding documents with filters: collection.find({"field": "value"})

Finding documents with multiple conditions: collection.find({"field1": "value1", "field2": "value2"})

Finding documents with OR conditions: collection.find({
    "$or": [
        {"field1": "value1"},
        {"field2": "value2"}
    ]
})


Projecting specific fields: collection.find({}, {"field1": 1, "field2": 1, "_id": 0})

Updating a document: collection.update_one({"condition_field": "condition_value"}, {"$set": {"field": "value"}})

Deleting a document: collection.delete_one({"condition_field": "condition_value"})

Aggregation Pipeline: pipeline = [
    {"$match": {"field": "value"}},
    {"$group": {"_id": "$group_field", "total": {"$sum": 1}}},
    {"$sort": {"total": -1}}
]
results = collection.aggregate(pipeline)
for result in results:
    print(result)

