Neo4j  Graph Database System Neo4j is a Graph Database System that supports both transactional and analytical processing of graphbased data It is part of a relatively new class of NoSQL databases and is considered schema optional a schema can be imposed if needed Neo4j supports various types of indexing is ACID compliant and supports distributed computing Similar systems include Microsoft CosmoDB and Amazon Neptune Neo4j  Query Language and Plugins Cypher  Neo4j’s graph query language created in 2011  Goal SQLequivalent language for graph databases  Provides a visual way of matching patterns and relationships Example nodesCONNECTTOotherNodes APOC Plugin  Awesome Procedures on Cypher  Addon library that provides hundreds of procedures and functions Graph Data Science Plugin  Provides efficient implementations of common graph algorithms eg Dijkstra’s PageRank etc Neo4j in Docker Compose Docker Compose  Supports multicontainer management  Setup is declarative using a YAML dockercomposeyaml file  Defines services volumes networks etc  One command can start stop or scale multiple services  Provides a consistent method for producing identical environments no more “it works on my machine”  Interaction is mostly via the command line Example dockercomposeyaml yaml services neo4j containername neo4j image neo4jlatest ports  74747474  76877687 environment  NEO4JAUTHneo4jNEO4JPASSWORD  NEO4Japocexportfileenabledtrue  NEO4Japocimportfileenabledtrue  NEO4Japocimportfileuseneo4jconfigtrue  NEO4JPLUGINSapoc graphdatascience volumes  neo4jdbdatadata  neo4jdblogslogs  neo4jdbimportvarlibneo4jimport  neo4jdbpluginsplugins Inserting Data by Creating Nodes CREATE User name Alice birthPlace Paris CREATE User name Bob birthPlace London CREATE User name Carol birthPlace London CREATE User name Dave birthPlace London CREATE User name Eve birthPlace Rome Adding an Edge with No Variable Names CREATE User name Alice birthPlace Paris CREATE User name Bob birthPlace London MATCH aliceUser name”Alice” MATCH bobUser name “Bob” CREATE aliceKNOWS since “20221201”bob Note Relationships are directed in neo4j Matching Which users were born in London MATCH usrUser birthPlace “London” RETURN usrname usrbirthPlace 13 Basic Data Importing LOAD CSV WITH HEADERS FROM filenetflixtitlescsv AS line CREATEMovie  id lineshowid title linetitle releaseYear linereleaseyear   Type the following into the Cypher Editor in Neo4j Browser Loading CSVs  General Syntax LOAD CSV WITH HEADERS FROM filefileinimportfoldercsv AS line FIELDTERMINATOR   do stuffs with line Importing with Directors this Time LOAD CSV WITH HEADERS FROM filenetflixtitlescsv AS line WITH splitlinedirector  as directorslist UNWIND directorslist AS directorname CREATE Person name trimdirectorname But this generates duplicate Person nodes a director can direct more than 1 movie Importing with Directors Merged MATCH pPerson DELETE p LOAD CSV WITH HEADERS FROM filenetflixtitlescsv AS line WITH splitlinedirector  as directorslist UNWIND directorslist AS directorname MERGE Person name directorname Adding Edges LOAD CSV WITH HEADERS FROM filenetflixtitlescsv AS line MATCH mMovie id lineshowid WITH m splitlinedirector  as directorslist UNWIND directorslist AS directorname MATCH pPerson name directorname CREATE pDIRECTEDm Gut Check Let’s check the movie titled Ray MATCH mMovie title RayDIRECTEDpPerson RETURN m p