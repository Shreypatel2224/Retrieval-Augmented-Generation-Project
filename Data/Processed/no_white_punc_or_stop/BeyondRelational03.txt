Benefits Relational Model Mostly Standard Data Model Query Language ACID Compliance Atomicity Consistency Isolation Durability Works well highly structured data handle large amounts data Well understood lots tooling experience Relational Database Performance Many ways RDBMS increases efficiency Indexing topic focused Directly controlling storage Columnoriented storage vs roworiented storage Query optimization Cachingprefetching Materialized views Precompiled stored procedures Data replication partitioning Transaction Processing Transaction sequence one CRUD operations performed single logical unit work Either entire sequence succeeds COMMIT entire sequence fails ROLLBACK ABORT Helps ensure Data Integrity Error Recovery Concurrency Control Reliable Data Storage Simplified Error Handling ACID Properties Atomicity transaction treated atomic unit fully executed parts executed Consistency transaction takes database one consistent state another consistent state Consistent state data meets integrity constraints Isolation Two transactions T1 T2 executed time cannot affect T1 T2 reading data problem T1 reading data T2 may writing result Dirty Read Nonrepeatable Read Phantom Reads Durability transaction completed committed successfully changes permanent Even event system failure committed transactions preserved Isolation Issues Dirty Read transaction T1 able read row modified another transaction T2 hasn’t yet executed COMMIT Nonrepeatable Read Two queries single transaction T1 execute SELECT get different values another transaction T2 changed data COMMITTED Phantom Reads transaction T1 running another transaction T2 adds deletes rows set T1 using Example Transaction Transfer Money DELIMITER CREATE PROCEDURE transfer senderid INT receiverid INT amount DECIMAL102 BEGIN DECLARE rollbackmessage VARCHAR255 DEFAULT Transaction rolled back Insufficient funds DECLARE commitmessage VARCHAR255 DEFAULT Transaction committed successfully Start transaction START TRANSACTION Attempt debit money account 1 UPDATE accounts SET balance balance amount accountid senderid Attempt credit money account 2 UPDATE accounts SET balance balance amount accountid receiverid Check sufficient funds account 1 SELECT balance accounts accountid senderid 0 Roll back transaction insufficient funds ROLLBACK SIGNAL SQLSTATE 45000 SET MESSAGETEXT rollbackmessage ELSE Log transactions sufficient funds INSERT transactions accountid amount transactiontype VALUES senderid amount WITHDRAWAL INSERT transactions accountid amount transactiontype VALUES receiverid amount DEPOSIT Commit transaction COMMIT SELECT commitmessage Result END END DELIMITER Limitations Relational Databases Schemas may evolve time apps need full strength ACID compliance Joins expensive lot data semistructured unstructured eg JSON XML Horizontal scaling presents challenges apps need something performant eg realtime lowlatency systems Scalability Conventional Wisdom Scale vertically bigger powerful systems demands highavailability make necessary scale type distributed computing model Scaling easier need modify architecture practical financial limits However Modern systems make horizontal scaling less problematic Distributed Systems distributed system “a collection independent computers appear users one computer” Andrew Tannenbaum Characteristics Distributed Systems Computers operate concurrently Computers fail independently shared global clock Distributed Storage Distributed Data Stores Data stored one node typically replicated block data available N nodes Distributed databases relational nonrelational MySQL PostgreSQL support replication sharding CockroachDB new player scene Many NoSQL systems support one models Network partitioning inevitable Network failures system failures Overall system needs Partition Tolerant system keep running even network partition CAP Theorem CAP Theorem states impossible distributed data store simultaneously provide two following three guarantees Consistency Every read receives recent write error Availability Every request receives nonerror response guarantee response contains recent write Partition Tolerance system continue operate despite arbitrary network issues CAP Theorem Database View Consistency Every user DB identical view data given instant Availability event failure database remains operational Partition Tolerance database maintain operations event network’s failing two segments distributed system Note definition Consistency CAP different ACID CAP Theorem Database View Continued Consistency Availability system always responds latest data every request gets response may able deal network issues Consistency Partition Tolerance system responds data distributed store always latest otherwise data request dropped Availability Partition Tolerance system always sends responds based distributed store data may absolute latest CAP Reality really saying cannot limit number faults requests directed server insist serving every request cannot possibly consistent interpreted must always give something consistency availability tolerance failure