including C avoid runtime stack growth recurse — still sign potential trouble time take build degenerate tree also prohibitive start empty binary search tree add keys order long take first key add go directly root could think taking single step creating node second key add require look root node take one step right could think taking two steps subsequent key add require one step one total number steps would take add n keys would determined sum 1 2 3 n sum well see several times throughout course equal nn 1 2 total number steps build entire tree would Θn2 Overall n gets large tree would hideously expensive build every subsequent search would painful well general situation need sure avoid else probably consider data structure binary search tree worst31425 439 PM ICS 46 Spring 2022 Notes Examples AVL Trees httpsicsucieduthorntonics46NotesAVLTrees 17case simply much burden bear n might get large find way control trees shape carefully force remain balanced well fine question course