tree would rearranged look like Compare diagram describing LR rotation node containing 40 C node containing 30 node containing 35 B empty left subtree node containing 30 T1 empty left subtree node containing 35 T2 empty right subtree node containing 35 T3 empty right subtree node containing 40 T4 rotation see wed expect node B example contained 35 root newlyrotated subtree node example contained 30 left child root newlyrotated subtree node C example contained 40 right child root newlyrotated subtree four subtrees T1 T2 T3 T4 empty still empty Note tree balanced rotation accident single rotation RR LR RL thats necessary correct imbalance introduced insertion algorithm removal algorithm Removals somewhat similar insertions sense would start usual binary search tree removal algorithm find correct imbalances recursion unwinds key difference removals require one rotation correct imbalances still require rotations path back root removal occurred â€” generally Olog n rotations Asymptotic