Distributed DBs ACID Pessimistic Concurrency ACID Transactions Focuses “data safety” Considered pessimistic concurrency model assumes one transaction protect transactions Assumes something go wrong Conflicts prevented locking resources transaction complete read write locks Write Lock Analogy Borrowing book library one else Optimistic Concurrency Transactions obtain locks data read write Optimistic assumes conflicts unlikely occur Even conflict everything still OK Add last update timestamp version number columns every table Read changing check end transaction see transaction caused modified Optimistic Concurrency Use Cases Low Conflict Systems eg backups analytical DBs readheavy systems Conflicts arise handled rolling back rerunning transaction notices conflict Optimistic concurrency works well allowing higher concurrency High Conflict Systems Rolling back rerunning transactions encounter conflict less efficient locking scheme pessimistic model might preferable NoSQL “NoSQL” first used