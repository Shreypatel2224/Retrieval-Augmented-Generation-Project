single node containing a single key the triangles with T1 T2 and T3 written in them are arbitrary subtrees which may be empty or may contain any number of nodes but which are themselves binary search trees Its important to remember that both of these trees — before and after — are binary search trees the rotation doesnt harm the ordering of the keys in nodes because the subtrees T1 T2 and T3 maintain the appropriate positions relative to the keys A and B All keys in T1 are smaller than A All keys in T2 are larger than A and smaller than B All keys in T3 are larger than B Performing this rotation would be a simple matter of adjusting a few pointers — notably a constant number of pointers no matter how many nodes are in the tree which means that this rotation would run in Θ1 time Bs parent would now point to A where it used to point to B As right child would now be B instead of the root of T2 Bs left child would now be the root of T2 instead of A A second kind of rotation is an RR