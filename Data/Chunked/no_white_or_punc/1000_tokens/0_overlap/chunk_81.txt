are required to meet the balance condition after every operation every time you insert or remove a key every node in the tree should have the AVL property To meet that requirement we need to restructure the tree periodically essentially detecting and correcting imbalance whenever and wherever it happens To do that we need to rearrange the tree in ways that improve its shape without losing the essential ordering property of a binary search tree smaller keys toward the left larger ones toward the right Rotations Rebalancing of AVL trees is achieved using what are called rotations which when used at the proper times efficiently improve the shape of the tree by altering a handful of pointers There are a few kinds of rotations we should first understand how they work then focus our attention on when to use them The first kind of rotation is called an LL rotation which takes the tree on the left and turns it into the tree on the right The circle with A and B written in them are each a