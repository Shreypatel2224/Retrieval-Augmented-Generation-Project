whether it looks balanced Theres a precise definition and the two trees above that dont meet that definition fail to meet it because they each have at least one node marked in the diagrams by a dashed square that doesnt have the AVL property AVL trees by definition are required to meet the balance condition after every operation every time you insert or remove a key every node in the tree should have the AVL property To meet that requirement we need to restructure the tree periodically essentially detecting and correcting imbalance whenever and wherever it happens To do that we need to rearrange the tree in ways that improve its shape without losing the essential ordering property of a binary search tree smaller keys toward the left larger ones toward the right Rotations Rebalancing of AVL trees is achieved using what are called rotations which when used at the proper times efficiently improve the shape of the tree by altering a handful of pointers There are a few kinds of rotations