Distributed DBs and ACID  Pessimistic Concurrency ACID Transactions  Focuses on “data safety”  Considered a pessimistic concurrency model because it assumes one transaction has to protect itself from other transactions  Assumes that if something can go wrong it will  Conflicts are prevented by locking resources until a transaction is complete there are both read and write locks  Write Lock Analogy Borrowing a book from a library If you have it no one else can Optimistic Concurrency  Transactions do not obtain locks on data when they read or write  Optimistic because it assumes conflicts are unlikely to occur  Even if there is a conflict everything will still be OK  How Add last update timestamp and version number columns to every table Read them when changing then check at the end of the transaction to see if any other transaction has caused them to be modified Optimistic Concurrency Use Cases  Low Conflict Systems eg backups analytical DBs readheavy systems  Conflicts that arise can