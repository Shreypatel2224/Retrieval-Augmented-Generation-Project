BTrees The idea we saw earlier of putting multiple set list hash table elements together into large chunks that exploit locality can also be applied to trees Binary search trees are not good for locality because a given node of the binary tree probably occupies only a fraction of any cache line Btrees are a way to get better locality by putting multiple elements into each tree node Btrees were originally invented for storing data structures on disk where locality is even more crucial than with memory Accessing a disk location takes about 5ms  5000000ns Therefore if you are storing a tree on disk you want to make sure that a given disk read is as effective as possible Btrees have a high branching factor much larger than 2 which ensures that few disk reads are needed to navigate to the place where data is stored B trees may also useful for inmemory data structures because these days main memory is almost as slow relative to the processor as disk drives were to main memory when Btrees