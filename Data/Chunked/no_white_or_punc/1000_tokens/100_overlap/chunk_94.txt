of the newlyrotated subtree The node C which in our example contained 40 is now the right child of the root of the newlyrotated subtree The four subtrees T1 T2 T3 and T4 were all empty so they are still empty Note too that the tree is more balanced after the rotation than it was before This is no accident a single rotation LL RR LR or RL is all thats necessary to correct an imbalance introduced by the insertion algorithm A removal algorithm Removals are somewhat similar to insertions in the sense that you would start with the usual binary search tree removal algorithm then find and correct imbalances while the recursion unwinds The key difference is that removals can require more than one rotation to correct imbalances but will still only require rotations on the path back up to the root from where the removal occurred — so generally Olog n rotations Asymptotic analysis The key question here is What is the height of an AVL tree with n nodes If the answer is Θlog n then we can be