take to do it Every key in the tree had to move So no matter what algorithm we used we would still have to move every key If there are n keys in the tree that would take Ωn time — moving n keys takes at least linear time even if you have the best possible algorithm for moving them the work still has to get done So in the worst case maintaining completeness after a single insertion requires Ωn time Unfortunately this is more time than we ought to be spending on maintaining balance This means well need to come up with a compromise as is often the case when we learn or design algorithms our willingness to tolerate an imperfect result thats still good enough for our uses will often lead to an algorithm that is much faster than one that achieves a perfect result So what would a good enough result be What is a good balance condition Our overall goal is for lookups insertions and removals from a binary search tree to require Olog n time in every case rather than letting them degrade to a