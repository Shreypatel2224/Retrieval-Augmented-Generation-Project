complicated An LR rotation requires five pointer updates instead of three but this is still a constant number of changes and runs in Î˜1 time Finally there is an RL rotation which is the mirror image of an LR rotation Once we understand the mechanics of how rotations work were one step closer to understanding AVL trees But these rotations arent arbitrary theyre used specifically to correct imbalances that are detected after insertions or removals An insertion algorithm Inserting a key into an AVL tree starts out the same way as insertion into a binary search tree Perform a lookup If you find the key already in the tree youre done because keys in a binary search tree must be unique When the lookup terminates without the key being found add a new node in the appropriate leaf position where the lookup ended The problem is that adding the new node introduced the possibility of an imbalance For example suppose we started with this AVL tree and then we inserted the key 35 into it A binary